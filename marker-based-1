<!DOCTYPE html>
<html lang="de">
    <head>
        <!-- Meta-Tags für Zeichensatz und Ansichtsfenster -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <!-- Einbindung der benötigten JavaScript-Bibliotheken -->
        <script src="https://aframe.io/releases/1.5.0/aframe.min.js"></script>
        <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
        <script src="https://raw.githack.com/fcor/arjs-gestures/master/dist/gestures.js"></script>
    </head>

    <body style="margin: 0px; overflow: hidden;">
        <!-- AR-Szene mit verschiedenen Einstellungen und Gestenerkennung -->
        <a-scene 
            embedded 
            arjs="sourceType: webcam; debugUIEnabled: false; detectionMode: mono_and_matrix; matrixCodeType: 3x3;"
            renderer="logarithmicDepthBuffer: true;"
            vr-mode-ui="enabled: false"
            gesture-detector
            id="scene">

            <!-- Assets für die Szene (3D-Modelle) -->
            <a-assets>
                <a-asset-item id="object-a" src="https://keb-rheinland-pfalz.de/wp-content/uploads/AR-tests/dice_20/scene.gltf"></a-asset-item>
                <a-asset-item id="object-b" src="https://keb-rheinland-pfalz.de/wp-content/uploads/AR-tests/cat_plushie/scene.gltf"></a-asset-item>
                <a-asset-item id="object-c" src="https://keb-rheinland-pfalz.de/wp-content/uploads/AR-tests/fox_plushie/scene.gltf"></a-asset-item>
                <a-asset-item id="object-d" src="https://keb-rheinland-pfalz.de/wp-content/uploads/AR-tests/plushie_shark/scene.gltf"></a-asset-item>
            </a-assets>

            <!-- Marker, der das 3D-Modell anzeigt -->
            <a-marker id="random-object" type="barcode" value="1" smooth="true" emitevents="true">
                <a-entity
                gltf-model="#random"
                scale="2 2 2"
                position="0 0 1"
                class="clickable"
                gesture-handler="minScale: 0.25; maxScale: 10">
                </a-entity>
            </a-marker>
            
            <!-- Kamera-Entity -->
            <a-entity camera></a-entity>
        </a-scene>
        
        <!-- UI-Elemente -->
        <div class="ui-frame"></div>

        <div class="button">
            <!-- Button zum Zufälligen Ändern des 3D-Modells -->
            <button class="randomize-object-button"></button>
            <!-- <button class="screenshot-button">Foto</button> -->
        </div>
        <!-- Spinner für Ladeanzeige -->
        <div id="spinner" class="spinner"></div>

        <style>
            /* Rahmen für die Benutzeroberfläche, zentriert und nimmt den gesamten Bildschirm ein */
            .ui-frame {
                pointer-events: none;
                height: 100vh;
                max-height: -webkit-fill-available;
                width: 100vw;
                max-width: -webkit-fill-available;
                border: 10px solid rgba(255, 255, 255, 0.15); 
                overflow: hidden;
                z-index: 9;
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                box-shadow: 
                    inset 5px 5px 5px rgba(233, 114, 76, 0.5),
                    inset -5px -5px 5px rgba(224, 190, 54, 0.5),
                    inset 0 0 10px rgba(255, 255, 255, 0.75);
            }
            
            /* Container für den Button, am unteren Rand des Bildschirms positioniert */
            .button {
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 10em; 
                display: flex;
                flex-direction: column; 
                justify-content: center;
                align-items: center;
                z-index: 10;
            }

            /* Button zum Zufälligen Ändern des 3D-Modells */
            .randomize-object-button {
                position: relative;
                display: flex;
                justify-content: center;
                align-items: center;
                width: 100px;
                height: 100px;
                border-radius: 50%;
                background: rgba(224, 190, 54, 0.25) url('https://keb-rheinland-pfalz.de/wp-content/uploads/AR-tests/reload_2.png') no-repeat center center;
                background-size: 60%;
                backdrop-filter: blur(10.2px);
                -webkit-backdrop-filter: blur(10.2px);
                border: 1px solid rgba(255, 255, 255, 0.15);
                box-shadow: 
                    0 0 10px rgba(255, 255, 255, 0.75), 
                    -10px 0 20px rgba(233, 114, 76, 0.75), 
                    10px 0 20px rgba(224, 190, 54, 0.75);  
                margin-bottom: 40px;
            }

            /* Spinner für Ladeanzeige */
            .spinner {
                border: 16px solid #E9724C;
                border-top: 16px solid #E0BE36;
                border-radius: 50%;
                width: 100px;
                height: 100px;
                animation: spin 2s linear infinite;
                position: fixed;
                top: 0;
                bottom: 0;
                left: 0;
                right: 0;
                margin: auto;
                z-index: 20; 
                display: none; 
            }

            /* Animation für den Spinner */
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
        
        <script>
            // Warten Sie, bis das Dokument vollständig geladen ist
            document.addEventListener('DOMContentLoaded', function () {
                // Referenzen auf HTML-Elemente und Initialisierung von Variablen
                var assets = document.querySelector('a-assets');
                var randomizeButton = document.querySelector('.randomize-object-button');
                var entity = document.querySelector('a-entity');
                var models = ['object-a', 'object-b', 'object-c', 'object-d']; // Liste der Modelle
                var startTime = Date.now(); // Startzeit für die Anzeige des Spinners
                var sceneEl = document.querySelector('#scene'); // Szene-Element
                var isMarkerVisible = false; // Marker-Sichtbarkeitsstatus

                // Event-Listener für Marker-Events
                sceneEl.addEventListener("markerFound", (e) => { isMarkerVisible = true; });
                sceneEl.addEventListener("markerLost", (e) => { isMarkerVisible = false; });

                // Initialisierung von Skalierungs- und Rotationsfaktoren für die Gestensteuerung
                var scaleFactor = 1;
                var initialScale = {x: 1, y: 1, z: 1}; 
                var rotationFactor = 0.1; 

                // Event-Listener für Gesten-Events
                sceneEl.addEventListener("onefingermove", handleRotation);
                sceneEl.addEventListener("twofingermove", handleScale);

                // Funktion zur Handhabung der Rotation
                function handleRotation(event) {
                    if (isMarkerVisible) {
                        entity.object3D.rotation.y += event.detail.positionChange.x * rotationFactor;
                        entity.object3D.rotation.x += event.detail.positionChange.y * rotationFactor;
                    }
                }

                // Funktion zur Handhabung der Skalierung
                function handleScale(event) {
                    if (isMarkerVisible) {
                        scaleFactor *= 1 + event.detail.spreadChange / event.detail.startSpread;
                        var minScale = entity.getAttribute('gesture-handler').minScale;
                        var maxScale = entity.getAttribute('gesture-handler').maxScale;
                        scaleFactor = Math.min(Math.max(scaleFactor, minScale), maxScale);
                        entity.object3D.scale.x = scaleFactor * initialScale.x;
                        entity.object3D.scale.y = scaleFactor * initialScale.y;
                        entity.object3D.scale.z = scaleFactor * initialScale.z;
                    }
                }

                // Funktion zum Zufälligen Ändern des Modells
                function randomizeModel() {
                    var currentModel = entity.getAttribute('gltf-model');
                    var randomModel, modelUrl;

                    // Verstecke das Modell und zeige den Spinner
                    entity.object3D.visible = false;
                    document.getElementById('spinner').style.display = 'block';

                    // Wähle ein zufälliges Modell, das nicht das aktuelle Modell ist
                    do {
                        randomModel = models[Math.floor(Math.random() * models.length)];
                        modelUrl = document.querySelector('#' + randomModel).getAttribute('src');
                    } while (modelUrl === currentModel);

                    // Setze die Startzeit und ändere das Modell
                    startTime = Date.now();
                    entity.setAttribute('gltf-model', modelUrl);
                }

                // Event-Listener für das Laden des Modells
                entity.addEventListener('model-loaded', function () {
                    var elapsedTime = Date.now() - startTime;
                    var remainingTime = Math.max(0, 1000 - elapsedTime); // Mindestens 1000 ms Spinner-Anzeigezeit

                    // Warte die verbleibende Zeit, wenn die Mindestanzeigezeit noch nicht erreicht ist
                    if (remainingTime > 0) {
                        setTimeout(function() {
                            document.getElementById('spinner').style.display = 'none';
                            entity.object3D.visible = true;
                        }, remainingTime);
                    } else {
                        // Verstecke den Spinner sofort, wenn die Mindestanzeigezeit erreicht ist
                        document.getElementById('spinner').style.display = 'none';
                        entity.object3D.visible = true;
                    }
                });

                // Event-Listener für das Laden aller Assets
                assets.addEventListener('loaded', function () {
                    // Ändere das Modell zufällig beim Laden der Seite
                    randomizeModel();
                });

                // Ändere das Modell zufällig beim Klicken auf den Button
                randomizeButton.addEventListener('click', randomizeModel);
            });
        </script>
    </body>
</html>